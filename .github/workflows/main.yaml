on:
  push:
    branches:
      - main

name: Auto Deploy Docker
jobs:
  build-image:
    name: Build n Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Build Image
        run: docker build -t rndio/express-contact:latest .
      - name: Login to DockerHub
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image to DockerHub
        run: docker push rndio/express-contact:latest
  # unit-testing:
  #   name: Unit Testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure SSH
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.SSH_HOST }}
  #         username: ${{ secrets.SSH_USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         script: |
  #           docker stop express-contact-testing || true && docker rm express-contact-testing || true
  #           docker pull rndio/express-contact:latest
  #           docker run -d --name express-contact-testing --network host -p 5000:5000 rndio/express-contact:latest
  #           mkdir -p /home/app/express-contact
  #           cd /home/app/express-contact
  #           touch .env && \
  #           echo "DATABASE_URL=\"mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}\"" > .env
  #           docker cp .env express-contact-testing:/usr/app/
  #           rm .env
  #           docker restart express-contact-testing
  #           sleep 10
  #           docker exec express-contact-testing npm run test
  deploy-to-production:
    name: Deploy To Production
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Configure SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker pull rndio/express-contact:latest
            docker stop express-contact-testing || true && docker rm express-contact-testing || true
            docker stop express-contact || true && docker rm express-contact || true
            docker run -d --name express-contact --network host -p 5000:5000 rndio/express-contact:latest
            touch .env && \
            echo "DATABASE_URL=\"mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}\"" > .env
            docker cp .env express-contact:/usr/app/ && rm .env
            docker restart express-contact
  
